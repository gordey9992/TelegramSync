name: TelegramSync CI/CD

on:
  push:
    branches: [ "main", "master" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:

env:
  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.count=3

jobs:
  build:
    name: Build Plugin
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Build project
      run: mvn -B clean compile --file pom.xml
      
    - name: Create JAR
      run: mvn -B package --file pom.xml -DskipTests
      
    - name: Verify JAR
      run: |
        echo "Checking JAR contents..."
        jar tf target/TelegramSync-*.jar | grep -E "(plugin\.yml|config\.yml|messages\.yml)"
        echo "All required files are present!"
        
        JAR_SIZE=$(stat -c%s target/TelegramSync-*.jar)
        echo "JAR size: $((JAR_SIZE / 1024)) KB"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: telegramsync-build
        path: |
          target/*.jar
          target/*-sources.jar
        retention-days: 30

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: telegramsync-build
        
    - name: Check structure
      run: |
        echo "Artifact contents:"
        ls -la
        echo ""
        echo "JAR files:"
        find . -name "*.jar" -type f

  quality:
    name: Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Check project structure
      run: |
        echo "Checking project structure..."
        
        REQUIRED_FILES=("pom.xml" "src/main/resources/plugin.yml" "src/main/resources/config.yml" "src/main/resources/messages.yml")
        
        for file in "${REQUIRED_FILES[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file - found"
          else
            echo "❌ $file - MISSING!"
            exit 1
          fi
        done
        
        JAVA_FILES_COUNT=$(find src/main/java -name "*.java" | wc -l)
        echo "Java files found: $JAVA_FILES_COUNT"
        
        if [ "$JAVA_FILES_COUNT" -eq "0" ]; then
          echo "❌ No Java files found!"
          exit 1
        fi
        
        echo "✅ Project structure is OK!"

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, test, quality]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: telegramsync-build
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          TelegramSync-*.jar
          TelegramSync-*-sources.jar
        body: |
          ## TelegramSync ${{ github.ref_name }}
          
          ### What's New
          - Improved synchronization stability
          - Added new filtering options
          - Optimized memory usage
          
          ### Fixes
          - Fixed message encoding issues
          - Improved Telegram connection handling
          - Better long message processing
          
          ### Quick Start
          1. Download `TelegramSync-*.jar`
          2. Place in `plugins/` folder
          3. Configure bot in `config.yml`
          4. Use `/tg test` to verify
          
          ### Commands
          ```bash
          /tg <message>          # Send to Telegram
          /telegramsync status   # Sync status
          /tgbroadcast <message> # Broadcast to Telegram
          /telegramsync reload   # Reload config
          ```
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
